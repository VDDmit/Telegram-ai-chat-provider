name: Build and Deploy to VPS

# Запускать воркфлоу при каждом push в ветку main
on:
  push:
    branches: [ "main" ]

# Переменные окружения для всего воркфлоу
env:
  #Это должно совпадать с тем, что в docker-compose.yml
  IMAGE_NAME: ghcr.io/vddmit/telegram-ai-chat-provider:v0.0.1

jobs:
  build-and-push:
    # Запускаем на виртуальной машине от GitHub
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Даем право на запись в GitHub Packages (GHCR)

    steps:
      # 1. Скачиваем код из репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Устанавливаем Java (Maven кешируется автоматически)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/vddmit/telegram-ai-chat-provider:${{ github.sha }}
            ghcr.io/vddmit/telegram-ai-chat-provider:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    # Этот шаг зависит от успешного завершения шага build-and-push
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      # 1. Подключаемся к VPS по SSH и выполняем команды
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          script: |
            # Переходим в директорию
            cd /ai-chat-provider

            # Экспортируем переменную с новым тегом
            export IMAGE_TAG=${{ github.sha }}

            # Логинимся в GHCR
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Скачиваем новый образ по уникальному тегу
            docker-compose pull

            # Перезапускаем контейнеры с новым образом (docker-compose подхватит переменную IMAGE_TAG)
            docker-compose up -d --force-recreate

            # (Опционально) Удаляем старые образы
            docker image prune -af