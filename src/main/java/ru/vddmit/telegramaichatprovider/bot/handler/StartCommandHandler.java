package ru.vddmit.telegramaichatprovider.bot.handler;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.vddmit.telegramaichatprovider.entity.User;
import ru.vddmit.telegramaichatprovider.entity.enums.StartBotState;
import ru.vddmit.telegramaichatprovider.service.MessageService;
import ru.vddmit.telegramaichatprovider.service.UserService;
import ru.vddmit.telegramaichatprovider.utils.MessageUtils;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
@RequiredArgsConstructor
@Order(1)
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class StartCommandHandler implements ChatHandler {

    MessageUtils messageUtils;
    UserService userService;
    MessageService messageService;

    Map<Long, StartBotState> userStates = new ConcurrentHashMap<>();
    Map<Long, String> tempModelName = new ConcurrentHashMap<>();

    @Override
    public boolean canHandle(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            return text.equals("/start") || userStates.containsKey(chatId);
        }
        return false;
    }

    @Override
    public BotApiMethod<?> handle(Update update) throws TelegramApiException {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();
        org.telegram.telegrambots.meta.api.objects.User tgUser = update.getMessage().getFrom();
        User user = userService.findOrCreateUser(tgUser);

        if (text.equals("/start")) {
            return handleStartCommand(update, user);
        }

        return handleSetupSteps(update, user);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –¥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É.
     */
    private BotApiMethod<?> handleStartCommand(Update update, User user) throws TelegramApiException {
        if (user.getPrivateAiApiKey() != null && !user.getPrivateAiApiKey().isBlank()) {
            String welcomeBackText = String.format(
                    "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s! üëã\n–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: `%s`.\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
                    user.getFirstName(),
                    user.getModel()
            );
            SendMessage welcomeMessage = messageUtils.generateSendMessageWithText(update, welcomeBackText);
            welcomeMessage.enableMarkdown(true);
            messageService.sendAndSaveBotMessage(welcomeMessage, user);
        } else {
            userStates.put(user.getId(), StartBotState.WAITING_FOR_MODEL_NAME);
            tempModelName.remove(user.getId());

            String startText = """
                    –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à–µ–≥–æ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞.
                    
                    –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
                    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ API.
                    
                    *–ü–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Gemini.*
                    
                    –ü—Ä–∏–º–µ—Ä: `gemini-1.5-pro`""";

            SendMessage sendStartMessage = messageUtils.generateSendMessageWithText(update, startText);
            sendStartMessage.enableMarkdown(true); // –í–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

            messageService.sendAndSaveBotMessage(sendStartMessage, user);
        }
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start (–≤–≤–æ–¥ –º–æ–¥–µ–ª–∏, –≤–≤–æ–¥ –∫–ª—é—á–∞).
     */
    private BotApiMethod<?> handleSetupSteps(Update update, User user) throws TelegramApiException {
        Long chatId = user.getId();
        String text = update.getMessage().getText();
        StartBotState state = userStates.getOrDefault(chatId, StartBotState.NONE);

        switch (state) {
            case WAITING_FOR_MODEL_NAME:
                tempModelName.put(chatId, text);
                userStates.put(chatId, StartBotState.WAITING_FOR_API_KEY);

                SendMessage apiKeyMessage = messageUtils
                        .generateSendMessageWithText(update, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á:");
                messageService.sendAndSaveBotMessage(apiKeyMessage, user);
                break;
            case WAITING_FOR_API_KEY:
                String modelName = tempModelName.get(chatId);
                user.setPrivateAiApiKey(text);
                user.setModel(modelName);
                userService.save(user);

                userStates.remove(chatId);
                tempModelName.remove(chatId);

                int userMessageId = update.getMessage().getMessageId();
                messageUtils.sendEphemeralMessage(
                        update,
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã.",
                        chatId,
                        userMessageId,
                        30);
                break;

            default:

                messageService.sendAndSaveBotMessage(
                        messageUtils.generateSendMessageWithText(update, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."),
                        user
                );
                break;
        }
        return null;
    }
}